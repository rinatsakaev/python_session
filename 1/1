Два типа функций: именованные и анонимные.
Именованные: def func()
Анонимные: f = lambda x: x**2
            f(5)
           (lambda x: x**2)(5)
Есть позиционные аргументы, именованные, обязательные и необязательные
f(*args) - произв число позиционных
f(**args) - произв число именованных
примеры в коде
Декоратор функции- функция, возвращающая функцию. Пример кэширующего декоратора в коде
Также декоратор можно прикреплять к функции через @.
Посмотреть имена аргументов функции можно через inspect.getargs(func.__code__)
Можно применить несколько декораторов:
@italic
@bold
def printing_func():
    print("hello")
Выведет <i><b>hello</b></i>
Можно заворачивать методы - пример в коде
Функция имеет тип types.FunctionType
Вывести все определенные в неймспейсе функции:
import types
print [f for f in globals().values() if type(f) == types.FunctionType]
или print [f for f in locals().values() if type(f) == types.FunctionType]
Декоратор класса:
def addId(cls):

    class AddId(cls):

        def __init__(self, id, *args, **kargs):
            super(AddId, self).__init__(*args, **kargs)
            self.__id = id

        def getId(self):
            return self.__id

    return AddId

МОДУЛЬ FUNCTOOLS
cmp_to_key(f) - перевести старую comparison function в новенькую key-function, т.к старые не поддерживаются в питон3
total_ordering(cls) - объявляем класс  с __eq__ и одним из сравнений:  __lt__(), __le__(), __gt__(), or __ge__() - получаем класс со всеми сравнениями.
Пример:
@total_ordering
class Student:
    def __eq__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) ==
                (other.lastname.lower(), other.firstname.lower()))
    def __lt__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) <
                (other.lastname.lower(), other.firstname.lower()))
reduce - предыдущие полученные значения функции складываются с текущим. Внутри примерно это:
def reduce(function, iterable, initializer=None):
    it = iter(iterable)
    if initializer is None:
        try:
            initializer = next(it)
        except StopIteration:
            raise TypeError('reduce() of empty sequence with no initial value')
    accum_value = initializer
    for x in it:
        accum_value = function(accum_value, x)
    return accum_value

lru_cache - кэширующий декоратор
partial - принимает функцию и аргументы. Возвращает класс с этой функцией и полями, в которыъх лежат аргументы
def partial(func, *args, **keywords):
    def newfunc(*fargs, **fkeywords):
        newkeywords = keywords.copy()
        newkeywords.update(fkeywords)
        return func(*args, *fargs, **newkeywords)
    newfunc.func = func
    newfunc.args = args
    newfunc.keywords = keywords
    return newfunc
partialmethod - делает геттер и сеттер, по сути.
>>> class Cell(object):
...     def __init__(self):
...         self._alive = False
...     @property
...     def alive(self):
...         return self._alive
...     def set_state(self, state):
...         self._alive = bool(state)
...     set_alive = partialmethod(set_state, True)
...     set_dead = partialmethod(set_state, False)
...
>>> c = Cell()
>>> c.alive
False
>>> c.set_alive()
>>> c.alive
True
Декоратор singledispatch позволяет сделать несколько функций для аргументов разного типа и вызывать их как одну, но с учетом типа аргумента.
Если вызывать функцию с типом, для которого нет реализации, то будет вызвана дефолтная.
Выглядит так:
>>> @singledispatch
... def fun(arg, verbose=False):
...     if verbose:
...         print("Let me just say,", end=" ")
...     print(arg)
>>> @fun.register
... def _(arg: int, verbose=False):
...     if verbose:
...         print("Strength in numbers, eh?", end=" ")
...     print(arg)
...
>>> @fun.register
... def _(arg: list, verbose=False):
...     if verbose:
...         print("Enumerate this:")
...     for i, elem in enumerate(arg):
...         print(i, elem)
>>> fun(42, verbose=True)
Strength in numbers, eh? 42
>>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)
Enumerate this:
0 spam
1 spam
2 eggs
3 spam
wraps. Можем передать в декоратор функцию, завернуть ее во wraps и сохранить таким образом все поля функции. Пример:
>>> from functools import wraps
>>> def my_decorator(f):
...     @wraps(f)
...     def wrapper(*args, **kwds):
...         print('Calling decorated function')
...         return f(*args, **kwds)
...     return wrapper
...
>>> @my_decorator
... def example():
...     """Docstring"""
...     print('Called example function')
...
>>> example()
Calling decorated function
Called example function
>>> example.__name__
'example'
>>> example.__doc__
'Docstring'