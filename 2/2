tuple - кортеж, immutable
t = tuple('hello world') #('h','e',..)
t = (1, 2)
t = 12, 13
t = (1, "text")
Кортежи поддерживают все операции над списками, не изменяющие список
(сложение, умножение на число, методы index() и count() и некоторые другие
операции).
Кортежи быстрее списков за счет того, что первые хранятся в памяти непрерывным куском.
Значит, создавать и индексировать - быстро.
Лист хранится в памяти хранится как 2 блока - первый с питоновской информацией, второй - с переменным размером -
мы ведь не знаем, что лежит в листе.
Создание списка:
l = list('hello world')
l = [1, 2]
...
Методы:
list.append(x) Добавляет элемент в конец списка
list.extend(L) Расширяет список list, добавляя в конец все элементы списка L

list.insert(i, x) Вставляет на i-ый элемент значение x
list.remove(x) Удаляет первый элемент в списке, имеющий значение x

list.pop([i]) Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент
list.index(x, [start [, end]]) Возвращает положение первого элемента от start до end со значением x

list.count(x) Возвращает количество элементов со значением x
list.sort([key = функция]) Сортирует список на основе функции
list.reverse() Разворачивает список
list.copy() Поверхностная копия списка(создает новый
составной объект, и затем (по мере возможности)
вставляет в него ссылки на объекты, находящиеся в
оригинале)
list.clear() Очищает список
Множества.
Set
s = {1,2,3}
s = set('abc')
поддерживают много теоретико - множественных операций


#####################Модуль copy:#############################################
copy() - shallow copy. Если находит составные объекты, то копирует ссылки на них
deepcopy() рекурсивно копирует составные объекты. Можно потом менять и оригинал не изменится
####################Модуль collections:#################################
ChainMap - склеивает несколько словарей
Counter
>>> cnt = Counter()
>>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
...     cnt[word] += 1
>>> cnt
Counter({'blue': 3, 'red': 2, 'green': 1})
#########################OrderedDict
>>> d = OrderedDict.fromkeys('abcde')
>>> d.move_to_end('b')
>>> ''.join(d.keys())
'acdeb'
>>> d.move_to_end('b', last=False)
>>> ''.join(d.keys())
'bacde'
##########################defaultdict - задаем тип возвращаемого значения по умолчанию, например, list/set/tuple.
 При вызове defaultdict.__getitem__(key), т.е defaultdict[key], если ключа нет, возвращается объект list/set/tuple
 с пустым конструктором.
Еще пример:
>>> def constant_factory(value):
...     return lambda: value
>>> d = defaultdict(constant_factory('<missing>'))
>>> d.update(name='John', action='ran')
>>> '%(name)s %(action)s to %(object)s' % d
'John ran to <missing>'

#################namedtuple

>>> # Basic example
>>> Point = namedtuple('Point', ['x', 'y'])
>>> p = Point(11, y=22)     # instantiate with positional or keyword arguments
>>> p[0] + p[1]             # indexable like the plain tuple (11, 22)
33
>>> x, y = p                # unpack like a regular tuple
>>> x, y
(11, 22)
>>> p.x + p.y               # fields also accessible by name
33
>>> p                       # readable __repr__ with a name=value style
Point(x=11, y=22)

>>> t = [11, 22]
>>> Point._make(t)
Point(x=11, y=22)

>>> p = Point(x=11, y=22)
>>> p._asdict()
OrderedDict([('x', 11), ('y', 22)])
###################модуль heapq########################3
очередь с приоритетом
>>> from heapq import heappush, heappop
>>> heap = []
>>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
>>> for item in data:
...     heappush(heap, item)
...
>>> ordered = []
>>> while heap:
...     ordered.append(heappop(heap))
...
>>> ordered
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> data.sort()
>>> data == ordered
True

heapq.heapreplace(heap, item)
Pop and return the smallest item from the heap, and also push the new item. The heap size doesn’t change.
 If the heap is empty, IndexError is raised. This is more efficient than heappop() followed by heappush(),
  and can be more appropriate when using a fixed-size heap. Note that the value returned may be larger than item!
  That constrains reasonable uses of this routine unless written as part of a conditional replacement:
Слить два отсортированных списка: heapq.merge(*iterables)
heapq.nlargest(n, iterable[, key])
heapq.nsmallest(n, iterable[, key])
Для маленьких n работает быстро. При больших лучше использовать sorted()
###########Enums
class enum.Enum
Base class for creating enumerated constants. See section Functional API for an alternate construction syntax.

class enum.IntEnum
Base class for creating enumerated constants that are also subclasses of int.

class enum.IntFlag
Base class for creating enumerated constants that can be combined using the bitwise operators without losing their IntFlag membership. IntFlag members are also subclasses of int.
>>> from enum import IntFlag
>>> class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...
>>> Perm.R | Perm.W
<Perm.R|W: 6>
>>> Perm.R + Perm.W
6
>>> RW = Perm.R | Perm.W
>>> Perm.R in RW
True


class enum.Flag
Base class for creating enumerated constants that can be combined using the bitwise operations without losing their Flag membership.

enum.unique()
Enum class decorator that ensures only one name is bound to any one value.

class enum.auto
Instances are replaced with an appropriate value for Enum members.
>>> from enum import IntFlag
>>> class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...
>>> Perm.R | Perm.W
<Perm.R|W: 6>
>>> Perm.R + Perm.W
6
>>> RW = Perm.R | Perm.W
>>> Perm.R in RW
True